const express = require('express');
const cors = require('cors');
const bodyparser = require('body-parser');
const mycon = require('mysql');
const fileupload = require('express-fileupload');
const Http=require('http');
const knex = require('knex');

// var localStorage = require('localStorage')

const app = express();
app.use(cors());
app.use(bodyparser.json());
app.use(bodyparser.urlencoded({extended:false}));
app.use(fileupload());
app.use(express.static('public'));


// const c = mycon.createConnection({
//     host : "192.168.1.115",
//     port : "3306",
//     user : "aduser",
//     password : "aduser",
//     database : "eplus_5"
// });

const db = knex({
    client: 'mysql', // Use 'mysql' for MySQL database
    connection: {
        host: "192.168.1.115",
        port: "3306",
        user: "aduser",
        password: "aduser",
        database: "eplus_5"
    },
});
  
db.raw("SELECT 1").then(() => {
    console.log("Database connected");
})
.catch((e) => {
    console.log("Database not connected");
    console.error(e);
});

// host : "mysql8.us.freehostia.com",
// port : "3307",
// user : "sharaj11_ei",
// password : "Shanmugam@123",
// database : "sharaj11_ei"

// c.connect(function(error){
//     if(error){console.log(error);}
//     else{console.log('Database Connected');}
// })



app.post('/sales', async (req, res) => {
    // Extract request parameters
    const { CurrentPageNumber, PageSize, filterParameters } = req.body;

    // Extract filter parameters
    const { company_id } = filterParameters || {};

    // Define fields for selecting data
    const fields = [
        'sales.id as sales_id',db.raw('ledgers.id') // Alias sales.id to avoid duplicate column name
        // Add other necessary fields from the sales table here...
    ];

    // Create query using Knex.js
    const query = db('sales')
        // .leftJoin('sale_details', 'sale_details.transaction_id', '=', 'sales.id')
        .leftJoin('ledgers', 'ledgers.id', '=', 'sales.customer_id')
        .leftJoin('customers', 'customers.id', '=', 'sales.customer_id')
        .leftJoin('companies', 'companies.id', '=', 'sales.company_id')
        // Add other joins and conditions here...
        .orderBy('sales.id', 'DESC')
        .where('sales.temp_save', 0)
        .groupBy('sales.id');

    // Apply company_id filter if provided
    if (company_id && company_id > 0) {
        query.where('sales.company_id', company_id);
    }

    try {
        // Execute query to get totalRows count
        // const totalRows=await query.clone().count();
        // const [{ totalRows }] = await query.clone().count('* as count');
        // console.log(totalRows)
        const countResult = await query.clone().select(fields).count('sales.id as count');
    // console.log('Count Result:', countResult); // Log the entire result

    // Extract totalRows from the result
    let totalRows=0;
    countResult.forEach(count => {
        totalRows+=count.count;
    });
    // const totalRows = countResult[0].count;

        // const [{ totalRows }] = await db.raw(`SELECT COUNT(*) as count FROM (${query.clone().toString()}) as subquery`);

        // Execute query to get paginated results
        const result = await query
            .clone()
            .select(fields)
            .offset((CurrentPageNumber - 1) * PageSize)
            .limit(PageSize);

        // Return response
        res.json({
            index: result,
            totalRows: totalRows,
        });
    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


const getTaxListAttribute = async (transactionDate, companyId) => {
    try {
        // Query to get tax list
        const result = await db('sales')
            .leftJoin('sale_details', 'sale_details.transaction_id', '=', 'sales.id')
            .select(
                'sale_details.tax_id',
                db.raw('(case sales.state_type_id when 1 OR 3 then (SUM(sale_details.tax_amount)/2) ELSE 0.00 end) as cgst_amount'),
                db.raw('(case sales.state_type_id when 1 then (SUM(sale_details.tax_amount)/2) ELSE 0.00 end) as sgst_amount'),
                db.raw('(case sales.state_type_id when 2 then (SUM(sale_details.tax_amount)) ELSE 0.00 end) as igst_amount')
            )
            .where('sales.transaction_date', transactionDate)
            .where('sales.company_id', companyId)
            .where('sales.payment_type', 1)
            .groupBy('sale_details.tax_id');

        return result;
    } catch (error) {
        console.error('Error:', error);
        throw new Error('Internal Server Error');
    }
};


app.get('/Checkstatus',(request,response)=>{

    let sql = 'select * from regstatus';

    c.query(sql,(error,result)=>{
        if(error){
            let s = {"status":"error"};
            response.send(s);
        }
        else{
            let status = result[0].regstate;
        
            let s = {"status":status};
            response.send(s);
        }
    })
})

app.get('/alluser',(request,response)=>{

    let sql = 'select * from signup';

    c.query(sql,(error,result)=>{
        if(error){
            let s = {"status":"error"};
            response.send(s);
        }
        else{
          
            response.send(result);
        }
    })
})

app.post('/Registration',(request,response)=>{
    let imagefile = request.files.profile;
    let filename = imagefile.name;
    let path = __dirname+'/public/upload/'+imagefile.name;
    let url = 'http://localhost:3000/upload';

    let {username,password,name,fathername,date_of_birth,email,phone} = request.body;

    let sql = 'insert into signup(username,password,name,fathername,date_of_birth,email,phone,status,profile,url) values (?,?,?,?,?,?,?,?,?,?)';

    let sql1 = 'update regstatus set regstate=?';

    c.query(sql1,[1],(error1,result1)=>{})

    c.query(sql,[username,password,name,fathername,date_of_birth,email,phone,0,filename,url],(error,result)=>{
        // if(error){
        //     let s = {"status":"error"};
        //     response.send(s);
        // }
        // else{
         
        //     let s = {"status":"Registered"};
        //     // result.cookie(`Id`,1);
        //     // console.log(req.cookies)
        //     response.send(s);
        // }
    })
    imagefile.mv(path, function(err) {
        if (err){
          let s = {"status":"error"};
          response.send(s);
        }
        else{
            let s = {"status":"Registered"};
            response.send(s);
        }
      });

})

app.post('/Forget',(request,response)=>{
    let {email,password}=request.body;
    let sql1='update signup set password=? where email=?';
    let sql = 'select * from signup where email=?';
    c.query(sql,[email],(error,result)=>{
        if(error){
            let s = {"status":"error"};
            response.send(s);
        }
        else if(result.length > 0){
          
            let id = result[0].id;
            let email1 = result[0].email;
            if(email1==email){
                c.query(sql1,[password,email],(error,result)=>{

                })

                let s = {"status":"Success"};
                response.send(s);
            }
            else{
                let s = {"status":"Invalid"};
                response.send(s);
            }
        }
        else{
            let s ={"status":"Invalid"};
            // console.log(s);
            response.send(s);
        }
    })
})

app.post('/Signin',(request,response)=>{
    let {username,password} = request.body;
    let sql = 'select * from signup where username=?';

    c.query(sql,[username],(error,result)=>{
        if(error){
            let s = {"status":"error"};
            response.send(s);
        }
        else if(result.length > 0){

            let id = result[0].id;
            let username1 = result[0].username;
            let password1 = result[0].password;
            if(username1 == username && password1 == password){
                let s = {"status":"Success","userid":id};
                // localStorage.setItem('myKey');
                // localStorage.setItem("id",id)
                // cookie.set("userData", id);
                // response.send('user data added to cookie');
                response.send(s);
            }
            else{
                let s = {"status":"Invalid"};
                response.send(s);
            }
        }
        else{
            let s ={"status":"final_error"};
            response.send(s);
        }
    })

})

app.get('/View_par_user/:id',(request,response)=>{
    let {id} = request.params;
    let sql = 'select * from signup where id=?';

    c.query(sql,[id],(error,result)=>{
        if(error){
            let s = {"status":"error"};
            response.send(s);
        }
        else{
            let name = result[0].name;
            let s = {"status":name};
            response.send(s);
        }
    })

})

app.get('/Get_userdetails/:id',(request,response)=>{
    let {id} = request.params;
    let sql = 'select * from signup where id=?';

    c.query(sql,[id],(error,result)=>{
        if(error){
            let s = {"status":"error"};
            response.send(s);
        }
        else{
            response.send(result);
        }
    })   
})

app.post('/Add_profilephoto',(request,response)=>{
    let userid = request.body.userid;
    let alt_text = request.body.alt_text;
    let imagefile = request.files.image;
    let filename = imagefile.name;
    let path = __dirname+'/public/upload/'+imagefile.name;

    let url = 'http://localhost:3000/upload';

    let sql = 'insert into profilephoto(userid,url,filename,alt_text,status)values(?,?,?,?,?)';

    c.query(sql,[userid,url,filename,alt_text,0],(error,result)=>{});

    imagefile.mv(path, function(err) {
        if (err){
          let s = {"status":"error"};
          response.send(s);
        }
        else{
            let s = {"status":"uploaded"};
            response.send(s);
        }
      });

})

app.get('/View_profilephoto/:userid',(request,response)=>{
    let {userid} = request.params;
    let sql = 'select * from profilephoto';
    c.query(sql,(error,result)=>{
        if(error){
            response.send(error);
        }
        else{
            response.send(result);
        }
    })
})

app.post('/Update',(request,response)=>{
    let {username,fathername,date_of_birth,email,phone,id} = request.body;
    
    let sql = `update signup set username=?,fathername=?,date_of_birth=?,email=?,phone=? where id=?`;

    c.query(sql,[username,fathername,date_of_birth,email,phone,id],(error,result)=>{
        if(error){
            let s = {"status":"error"};
            response.send(s);
        }
        else{
            let s = {"status":"success"};
            response.send(s);
        }
    })

})


app.post('/profileupload',(request,response)=>{
    // let userid = localStorage.getItem('userid');
    let userid = request.body.id;
    let imagefile = request.files.profile;
    let filename = imagefile.name;
    let path = __dirname+'/public/upload/'+imagefile.name;
    let url = 'http://localhost:3000/upload';
    console.log(userid);
    let sql = `update signup set profile=?,url=? where id=?`;

    c.query(sql,[filename,url,userid],(error,result)=>{
        if (error){
            let s = {"status":"error"};
            response.send(s);
          }
          else{
              let s = {"status":"Uploaded"};
              response.send(s);
          }
    })

    imagefile.mv(path, function(err) {
        // if (err){
        //   let s = {"status":"error"};
        //   response.send(s);
        // }
        // else{
        //     let s = {"status":"Uploaded"};
        //     // console.log(s);
        //     response.send(s);
        // }
      });

})


// app.get('/ref/:id',(request,response)=>{
//     let {id}=request.params;
//     let sql=`select * from refer where refid=?`;

//     c.query(sql,[id],(error,result)=>{
//         if (error){
//             console.log(error);
//         }
//         else {
//            for(var i=0;i<result.length;i++){
//             if(result[i].refid==null || result[i].refid==undefined){
//                 console.log(result[i]);
//             }
//             else if(result[i].refid!=null){
//             Http.get(`http://localhost:3000/det/${result[i].id}`);
//             // console.log(result[i]);
//             response.send(result[i]);
//             }
//            }
//         }
//     })
// })

app.get('/ref/:id',(request,response)=>{
    let {id}=request.params;
    let sql='select * from refer where refid=?';
    c.query(sql,[id],(error,result)=>{
        if (error){
            console.log(error);
        }
        else {
            let mypromise=result.map(row=>{
                return new Promise((resolve,reject)=>{
                    c.query(sql,[row.id],(error,result)=>{
                        if(error){
                            reject(error);
                        }
                        else{
                            resolve(result);
                            console.log(result);
                        }
                    })
                })
            })

            Promise.all(mypromise)
                            .then(result=>{
                                let list2=[].concat(...result);
                                return response.send(list2);
                            })
                          .catch(error => {
                            return response.send(error);
                          });

        }
    })
})



// app.get('/ref/:id',(request,response)=>{
//     let {id}=request.params;
//     let sql=`select * from refer where refid=?`;

//     c.query(sql,[id],(error,result)=>{
//         if (error){
//             console.log(error);
//         }
//         else {
//             let mypromise=result.map(row=>{
//                 return new Promise((resolve,reject)=>{
//                     c.query(sql,[row.id],(error,result)=>{
//                         if(error){
//                             reject(error);
//                         }
//                         else{
//                             resolve(result);
//                         }
//                     });
//                 });
//             });
//                 Promise.all(mypromise)
//                 .then(result=>{
//                     let list2=[].concat(...result);
//                     return response.send(list2);
//                 })
//               .catch(error => {
//                 return response.send(error);
//               });
          
//         };
//     });
// });






// app.get('/ref/:id',(request,response)=>{
//     let {id}=request.params;
//     let sql=`select * from refer where refid=?`;

//     c.query(sql,[id],(error,result)=>{
//         if (error){
//             console.log(error);
//         }
//         else {
//             for(var i=0;i<result.length;i++){   
//             console.log(result[i].id);
//             c.query(sql,[result[i].id],(error,result1)=>{
//                 if(error){
//                     console.log(error)
//                 }
//                 else {
//                     console.log(result1)
//                   result1.map((k,v)=>{
//                     c.query(sql,[k.id],(error,result)=>{
//                         if(error){
//                             console.log(error)
//                         }
//                         else{
//                             console.log(result);
//                            console.log(result.id);
//                         }
//                     })

//                    })
//                 }
//             })
//             } 
//         }
//     })
// })



app.listen(3003, ()=>{console.log('Port number running in 3003')});


// var refer=result[0].reffered_id;
// while(refer!=null){
//     c.query(sel1,[refer],(err,result)=>{
//         if(err){
//             response.send(err);
//         }
//         else{
//             refer=result[0].id;
//         }
//     })
// }

